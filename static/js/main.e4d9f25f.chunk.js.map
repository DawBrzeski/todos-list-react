{"version":3,"sources":["features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/styled.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/TaskList/searchQueryParamName.js","routes.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/FetchExampledTasksButton/index.js","features/tasks/TasksPage/index.js","features/author/AuthorPage.js","features/tasks/TaskPage/index.js","Navigation/styled.js","Navigation/index.js","App.js","reportWebVitals.js","GlobalStyle.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","loading","fetchExampleTasksSuccess","fetchExampleTasksError","actions","setTasks","selectTasksState","selectTasks","selectHideDone","selectLoading","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","StyledForm","styled","form","theme","breakpoint","mobileMax","Button","button","color","teal","white","input","alto","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","Input","ref","value","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","toggleDone","forestGreen","remove","crimson","searchQueryParamName","toTask","useQueryParameter","key","location","useLocation","URLSearchParams","search","get","TaskList","query","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","Wrapper","div","silver","Buttons","areTasksEmpty","isEveryTaskDone","disabled","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","Container","children","Search","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","FetchExampledTasksButton","TasksPage","AuthorPage","TaskPage","useParams","taskID","find","getTaskById","activeClassName","StyledNavLink","NavLink","attrs","Navigation","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","gallery","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","black","document","getElementById"],"mappings":"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","file":"static/js/main.e4d9f25f.chunk.js","sourcesContent":["const localStorageKey = \"tasks\"; \n\nexport const saveTasksInLocalStorage = tasks =>\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\n\nexport const getTasksFromLocalStorage = () =>\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\n\nconst tasksSlice = createSlice({\n    name: 'tasks',\n    initialState: {\n        tasks: getTasksFromLocalStorage(),\n        hideDone: false,\n    },\n    reducers: {\n        addTask: ({ tasks }, { payload: task }) => {\n            tasks.push(task);\n        },\n        toggleHideDone: state => {\n            state.hideDone = !state.hideDone;\n        },\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\n            const index = tasks.findIndex(({ id }) => id === taskId)\n            tasks[index].done = !tasks[index].done;\n        },\n        removeTask: ({ tasks }, { payload: taskId }) => {\n            const index = tasks.findIndex(({ id }) => id === taskId);\n            tasks.splice(index, 1);\n        },\n        setAllDone: ({ tasks }) => {\n            for (const task of tasks) {\n                task.done = true;\n            }\n        },\n        fetchExampleTasks: state => {\n            state.loading = true;\n        },\n        fetchExampleTasksSuccess: (state, { payload: tasks }) => {\n            state.tasks = tasks;\n            state.loading = false;\n        },\n        fetchExampleTasksError: (state) => {\n            state.loading = false;\n        }\n\n    },\n});\n\nexport const { addTask,\n    toggleHideDone,\n    setTasks,\n    toggleTaskDone,\n    removeTask,\n    setAllDone,\n    fetchExampleTasks,\n    fetchExampleTasksSuccess,\n    fetchExampleTasksError,\n    } = tasksSlice.actions;\n\nconst selectTasksState = state => state.tasks;\n\nexport const selectTasks = state => selectTasksState(state).tasks;\nexport const selectHideDone = state => selectTasksState(state).hideDone;\nexport const selectLoading = state => selectTasksState(state).loading;\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\n\nexport const getTaskById = (state, taskID) =>\n    selectTasks(state).find(({ id }) => id === taskID);\n\nexport const selectTasksByQuery = (state, query) => {\n    const tasks = selectTasks(state);\n    if (!query || query.trim() === \"\") {\n        return tasks;\n    }\n\n    return tasks.filter(({ content }) => content.toUpperCase().includes(query.trim().toUpperCase()));\n}\nexport default tasksSlice.reducer;\n\n","import styled from \"styled-components\";\n\nexport const StyledForm = styled.form  `\ndisplay: grid; \ngrid-template-columns: 1fr auto;\ngrid-gap: 20px;\n\n@media (max-width: ${({theme}) => theme.breakpoint.mobileMax}px) {\n    grid-template-columns: 1fr;\n}\n`;\n\n\nexport const Button = styled.button`\npadding: 10px; \nbackground: ${({theme}) => theme.color.teal};\ncolor: ${({theme}) => theme.color.white};\nborder: none;\ntransition: 0.3s;\n\n&:hover {\n    filter: brightness(110%);\n    transform: scale(1.1);\n}\n&active {\n    filter: brightness(120%);\n}\n`;","import styled from \"styled-components\";\n\n\nexport default styled.input `\npadding: 10px; \nborder: 1px solid ${({theme}) => theme.color.alto};\n`;\n","import { useState, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addTask } from \"../../tasksSlice\";\nimport { StyledForm, Button } from \"./styled\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport Input from \"../../Input\";\n\nconst Form = () => {\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\n    const inputRef = useRef(null);\n\n    const dispatch = useDispatch();\n\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        const trimmedNewTaskContent = newTaskContent.trim();\n\n        if (trimmedNewTaskContent === \"\") {\n            return;\n        }\n\n        dispatch(addTask({\n            content: trimmedNewTaskContent,\n            done: false,\n            id: nanoid(),\n        }))\n\n        setNewTaskContent(\"\");\n        inputRef.current.focus();\n    };\n\n    return (\n        <StyledForm\n            onSubmit={onFormSubmit}>\n            <Input\n                ref={inputRef}\n                value={newTaskContent}\n                placeholder=\"Co jest do zrobienia?\"\n                onChange={({ target }) => setNewTaskContent(target.value)}\n            >\n            </Input>\n            <Button> Dodaj zadanie</Button>\n        </StyledForm>\n    )\n};\n\nexport default Form;","import styled, { css } from \"styled-components\";\n\nexport const List = styled.ul`\n    margin: 0;\n    padding: 0;\n    list-style: none;\n`;\n\nexport const Item = styled.li`\n    display: grid;\n    grid-template-columns: auto 1fr auto;\n    grid-gap: 10px;\n    align-items: center;\n    padding: 10px;\n    border-bottom: 1px solid #ddd;\n\n    ${({ hidden }) => hidden && css`\n        display:none; \n    `}\n`;\n\nexport const Content = styled.span`\n${({ done }) => done && css`\n    text-decoration: line-through;\n`}\n`;\n\nexport const Button = styled.button`\n    border: none;\n    height: 30px;\n    width: 30px;\n    color: ${({ theme }) => theme.color.white};;\n    padding: 0;\n    cursor: pointer;\n\n${({ toggleDone }) => toggleDone && css`\nbackground: ${({ theme }) => theme.color.forestGreen};;\n\n&:hover {\n    filter: brightness(110%);\n    }\n&:active: {\n    filter: brightness(120%);\n\n}\n\n`}\n${({ remove }) => remove && css`\nbackground: ${({ theme }) => theme.color.crimson};\n\n&:hover {\n    filter: brightness(110%);\n    }\n&:active: {\n    filter: brightness(120%);\n\n}\n`}\n\n\n`;","const searchQueryParamName = \"szukaj\"; \n\nexport default searchQueryParamName; ","export const toTasks = () => \"/zadania\";\nexport const toAuthor = () => \"/autor\";\n\nexport const toTask = ({ id } = { id: \":id\"}) => `/zadania/${id}`; ","import { useHistory, useLocation } from \"react-router-dom\";\n\nexport const useQueryParameter = key => {\n    const location = useLocation();\n    const searchParams = new URLSearchParams(location.search);\n    return searchParams.get(key);\n}\n\nexport const useReplaceQueryParameter = () => {\n    const location = useLocation();\n    const history = useHistory();\n\n    return ({ key, value }) => {\n        const searchParams = new URLSearchParams(location.search);\n\n        if (value === undefined) {\n            searchParams.delete(key);\n        } else {\n            searchParams.set(key, value);\n        }\n        const newSearch = searchParams.toString();\n        history.push(`${location.pathname}?${newSearch}`);\n    }\n\n}","import { List, Item, Content, Button } from \"./styled\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { toggleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from \"../../tasksSlice\";\nimport { Link } from \"react-router-dom\";\nimport searchQueryParamName from \"./searchQueryParamName\";\nimport { toTask } from \"../../../../routes\";\nimport { useQueryParameter } from \"../queryParameters\";\n\nconst TaskList = () => {\n    const query = useQueryParameter(searchQueryParamName);\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\n    const hideDone = useSelector(selectHideDone);\n\n    const dispatch = useDispatch();\n\n    return (\n        <List>\n            {tasks.map(task => (\n                <Item\n                    key={task.id}\n                    hidden={task.done && hideDone}>\n                    <Button toggleDone\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\n                    >\n                        {task.done ? \"✓\" : \"\"}\n                    </Button>\n                    <Content done={task.done}>\n                        <Link to={toTask({ id: task.id })}>{task.content}</Link>\n                    </Content>\n                    <Button\n                        remove\n                        onClick={() => dispatch(removeTask(task.id))}\n                    >\n                        🗑\n                    </Button>\n                </Item>\n            ))}\n        </List>\n    )\n};\n\nexport default TaskList;","import styled from \"styled-components\"; \n\nexport const Wrapper = styled.div`\ndisplay: flex; \nflex-wrap: wrap; \n`; \n\nexport const Button = styled.button`\nbackground: transparent;\ncolor: ${({theme}) => theme.color.teal};\nborder: none;\nmargin: 0 0 0 20px; \ntransition: filter 0.3s; \n\n@media(max-width: ${({theme}) => theme.breakpoint.mobileMax}px) {\n    flex-basis: 100%auto;\n    margin:10px; \n}\n&:hover {\nfilter: brightness(110%);\n}\n\n&:active {\nfilter: brightness(120%);\n}\n&:disabled {\n    color: ${({theme}) => theme.color.silver}; \n}\n`;","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    toggleHideDone,\n    setAllDone,\n    selectAreTasksEmpty,\n    selectHideDone,\n    selectIsEveryTaskDone,\n} from \"../../tasksSlice\";\nimport { Wrapper, Button } from \"./styled\";\n\n\nconst Buttons = () => {\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\n    const hideDone = useSelector(selectHideDone);\n\n    const dispatch = useDispatch();\n\n    return (\n        <Wrapper>\n            {!areTasksEmpty > 0 && (\n                <>\n                    <Button onClick={() => dispatch(toggleHideDone())}\n                    >\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\n                    </Button>\n                    <Button\n                        onClick={() => dispatch(setAllDone())}\n                        disabled={isEveryTaskDone}\n                    >Ukończ wszsytkie\n                    </Button>\n                </>\n\n            )}\n        </Wrapper>\n    )\n};\n\n\nexport default Buttons;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.section `\n    margin: 10px 0;\n    background: ${({theme}) => theme.color.white};\n    box-shadow: 0 0 5px ${({theme}) => theme.color.alto};\n`;\n\nexport const Header = styled.header `\nborder-bottom: 1px solid ${({theme}) => theme.color.alto};\ndisplay: grid;\ngrid-template-columns: auto auto;\ngrid-gap: 20px;\njustify-content: space-between;\nalign-items: center;\npadding: 20px;\n\n@media(max-width: ${({theme}) => theme.breakpoint.mobileMax}px){\n    grid-template-columns: 1fr ;\n}\n`;\n\nexport const Title =styled.h2`\nfont-size: 20px;\nmargin: 0; \n`;\n\nexport const Body = styled.div`\npadding:20px;\n`;\n","import { Wrapper, Header, Title, Body } from \"./styled\";\n\nconst Section = ({title, body, extraHeaderContent}) => (\n    <Wrapper>\n    <Header>\n      <Title>{title}</Title>\n     {extraHeaderContent}\n    </Header>\n    <Body>\n      {body}\n    </Body>\n  </Wrapper>\n); \n\nexport default Section; \n","\nimport styled from \"styled-components\";\n\nexport const Wrapper = styled.header`\npadding-left:18px;\n`;\n","import { Wrapper } from \"./styled\";\n\nconst Header = ({title}) => (\n    <Wrapper>\n    <h1>{title}</h1>\n  </Wrapper>\n);\n\nexport default Header; ","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\nmax-width: 900px;\npadding: 20px; \nmargin: 0 auto; \n\n`;","import { Wrapper} from \"./styled\";\n\nconst Container = ({children}) => (\n    <Wrapper>\n        {children}\n    </Wrapper>\n); \n\nexport default Container; ","import styled from \"styled-components\";\n\n\nexport const Wrapper = styled.div `\ndisplay: grid; \ngrid-template-columns: 1fr;\n`","import Input from \"../../Input\";\nimport { useQueryParameter, useReplaceQueryParameter } from \"../queryParameters\";\nimport searchQueryParamName from \"../TaskList/searchQueryParamName\";\nimport { Wrapper } from \"./styled\";\n\n\nconst Search = () => {\n    const query = useQueryParameter(searchQueryParamName);\n    const replaceQueryParameter = useReplaceQueryParameter();\n\n    const onInputChange = ({ target }) => {\n\n        replaceQueryParameter({\n            key: searchQueryParamName,\n            value: target.value.trim() !== \"\" ? target.value: undefined,\n\n        });\n    };\n\n    return (\n\n        <Wrapper>\n            <Input\n                placeholder=\"Filtruj zadania\"\n                value={query || \"\"}\n                onChange={onInputChange}\n            />\n        </Wrapper>\n    )\n};\n\nexport default Search; ","import { useDispatch, useSelector } from \"react-redux\"\nimport { fetchExampleTasks, selectLoading } from \"../../tasksSlice\";\nimport { Button, Wrapper } from \"../Buttons/styled\";\n\n\n\nconst FetchExampledTasksButton = () => {\n    const dispatch = useDispatch();\n    const loading = useSelector(selectLoading);\n    return (\n        <Wrapper>\n        <Button disabled={loading} onClick={() => dispatch(fetchExampleTasks())}>\n            {\n                loading\n                    ? \"Ładowanie\"\n                    : \"Pobierz przykładowe zadania\"\n            }\n\n        </Button>\n        </Wrapper>\n\n    )\n\n}\nexport default FetchExampledTasksButton;","import Form from \"../TasksPage/Form\";\nimport TaskList from \"../TasksPage/TaskList\";\nimport Buttons from \"../TasksPage/Buttons\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport Search from \"./Search\";\nimport FetchExampledTasksButton from \"./FetchExampledTasksButton\";\n\n\n\nfunction TasksPage() {\n\n\n\n  return (\n    <Container>\n\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        extraHeaderContent={<FetchExampledTasksButton/>}\n        body={<Form />}\n      />\n\n      <Section\n        title=\"Wyszukiwarka\"\n        body={<Search />}\n      />\n\n      <Section\n        title=\"Lista zadań\"\n        body={<TaskList />}\n        extraHeaderContent={<Buttons />}\n      />\n\n    </Container>\n  );\n}\n\nexport default TasksPage;\n","import Container from \"../../common/Container\";\nimport Header from \"../../common/Header\";\nimport Section from \"../../common/Section\";\n\n\nconst AuthorPage = () => (\n    <Container>\n        <Header\n            title=\"O autorze\" />\n        <Section\n            title=\"Dawid Brzeski\"\n            body={\n                <><strong>Witam wszystkich bardzo serdecznie na mojej stronie! </strong> Nazywam się Dawid,\n                mam 24 lata, juz niebawem 25.\n                Od\n                kilku dobrych lat pracuje jako inspektor, gdzie praca odbywa się zazwyczaj za granią naszego kraju.\n                Praca\n                nie jest cięka lecz bardzo wymagająca pod względem przemieszczania się, codziennie pracujemy w innym\n                miejscu, nieraz miejsca załadunku oddalone są od siebie o 500km. Z tego tez powodu zdecydowalem się\n                zapisać\n                na kurs <strong>YOUCODE</strong>. Jestem tez studentem Uniwersytetu Gdanskiego na kierunku\n                informatyka i\n                ekonometria.\n                <br></br> <br>\n                </br>W komputerach jestem bardzo obeznany, od dzieciaka się nimi bawie. Przerabiałem tez\n                róznorakie\n                kursy min. mySQL, PS, Phyton, MS office, WP, Cyberseciurity lecz tylko czysto hobbystycznie.\n                Szczerze wierzę, ze po tym kursie dam rade wszystko sobie usyschematyzowac i uda mi sie znalezc\n                pierwsza\n                prace w środowisku IT. </>\n            }\n        />\n    </Container>\n)\n\nexport default AuthorPage; ","import Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Container from \"../../../common/Container\";\nimport { useParams } from \"react-router\";\nimport { useSelector } from \"react-redux\";\nimport { getTaskById } from \"../tasksSlice\";\n\n\n\n\n\nfunction TaskPage() {\n  const { id } = useParams();\n  const task = useSelector(state => getTaskById(state, id));\n\n\n  return (\n    <Container>\n      <Header title=\"Szczegóły zadania\" />\n      <Section\n        title={task ? task.content : \"Nie znaleziono zadania :(\"}\n        body={!!task && (\n          <>\n            <strong> Ukończono: </strong> {task.done ? \"Tak\" : \"Nie\"}\n          </>\n        )}\n      />\n\n    </Container>\n  );\n}\n\nexport default TaskPage;\n","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nconst activeClassName = \"link-active\";\n\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\n    activeClassName,\n}))`\ncolor: ${({ theme }) => theme.color.white};\ntext-decoration: none; \n\n&.${activeClassName} {\n    font-weight: bold; \n}\n&:hover {\n    border-bottom: solid 1px;  \n}\n\n`;\n\nexport const List = styled.ul`\nbackground: ${({ theme }) => theme.color.teal};\nmargin: 0;\npadding: 0;\ndisplay: flex;\njustify-content: center;\nlist-style: none;\n`;\n\nexport const Item = styled.li`\nmargin: 20px; \n`","import { toAuthor, toTasks } from \"../routes\";\nimport { List, Item, StyledNavLink } from \"./styled\";\n\nconst Navigation = () => {\n    return (\n        <nav>\n            <List>\n                <Item>\n                    <StyledNavLink to={toTasks()}>Zadania</StyledNavLink>\n                </Item>\n                <Item>\n                    <StyledNavLink to={toAuthor()}>O autorze</StyledNavLink>\n                </Item>\n            </List>\n        </nav>\n    );\n};\nexport default Navigation; ","import TasksPage from \"./features/tasks/TasksPage\"\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport AuthorPage from \"./features/author/AuthorPage\";\nimport TaskPage from \"./features/tasks/TaskPage\"\nimport { toAuthor, toTask, toTasks } from \"./routes\";\nimport Navigation from \"./Navigation\";\n\n\nconst App = () => (\n    <HashRouter>\n        <Navigation></Navigation>\n            <Switch>\n                <Route path={toTask()}>\n                    <TaskPage />\n                </Route>\n                <Route path={toTasks()}>\n                    <TasksPage />\n                </Route>\n                <Route path={toAuthor()}>\n                    <AuthorPage />\n                </Route>\n                <Route>\n                    <Redirect to={toTasks()} />\n                </Route>\n            </Switch>\n        \n    </HashRouter>\n\n)\nexport default App; ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\nhtml {\n    box-sizing: border-box;\n}\n*, ::after, ::before {\n    box-sizing:inherit;\n}\nbody{\n    font-family: 'Montserrat', sans-serif; \n    background: ${({theme}) => theme.color.gallery};\n}\n\n`;","export const getExampleTasks = async () => {\n    const response = await fetch(\"/todos-list-react/exampleTasks.json\");\n\n    if(!response.ok) {\n        new Error(response.statusText);\n    }\n\n    return await response.json();\n};\n","import { takeLatest, call, put, delay, select, takeEvery } from \"redux-saga/effects\";\nimport { getExampleTasks } from \"./getExampleTasks\";\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\nimport { fetchExampleTasks, fetchExampleTasksError, fetchExampleTasksSuccess, selectTasks } from \"./tasksSlice\";\n\nfunction* fetchExampleTasksHandler() {\n    try {\n        yield delay(1000);\n        const exampleTasks = yield call(getExampleTasks);\n        yield put(fetchExampleTasksSuccess(exampleTasks));\n    } catch (error) {\n        yield put(fetchExampleTasksError());\n        yield call(alert, \"Coś poszło nie tak!\");\n    }\n}\n\nfunction* saveTasksInLocalStorageHandler() {\n    const tasks = yield select(selectTasks);\n    yield call(saveTasksInLocalStorage, tasks);\n}\n\nexport function* tasksSaga() {\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\n}","import { all } from \"@redux-saga/core/effects\";\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\n\n\nexport default function* rootSaga() {\n    yield all([\n        tasksSaga(),\n    ]);\n}","import { configureStore } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./rootSaga\";\nimport tasksReducer from './features/tasks/tasksSlice';\n\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n    reducer: {\n        tasks: tasksReducer,\n    },\n    middleware: [sagaMiddleware],\n}); \n\nsagaMiddleware.run(rootSaga);\n\nexport default store; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport reportWebVitals from './reportWebVitals';\nimport {ThemeProvider} from \"styled-components\";\nimport {theme} from \"./theme\"; \nimport { GlobalStyle} from \"./GlobalStyle\"; \nimport {Provider } from \"react-redux\"; \nimport store from \"./store\"; \n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle></GlobalStyle>\n    <App />\n    </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\n    color: {\n        black: \"#000\",\n        silver: \"#ccc\",\n        alto: \"#ddd\",\n        gallery: \"#eee\",\n        white: \"#fff\",\n        teal: \"#008080\",\n        crimson: \"#db143c\",\n        forestGreen: \"#228c22\",\n    },\n    breakpoint: {\n        mobileMax: 767,\n    },\n};"],"sourceRoot":""}